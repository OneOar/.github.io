<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>three的容器截图为黑色的解决办法</title>
      <link href="/2022/04/26/threeJs/"/>
      <url>/2022/04/26/threeJs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><h2 id="实际错误是"><a href="#实际错误是" class="headerlink" title="实际错误是"></a>实际错误是</h2><p>所有的 webGL 以及 three 的容器截图都为黑色的背景，其他元素无恙</p></blockquote><blockquote><h3 id="截图日志的报错为："><a href="#截图日志的报错为：" class="headerlink" title="截图日志的报错为："></a>截图日志的报错为：</h3></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14889312-e20803552369bf98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台输出.png"></p><h2 id="在这个问题解决之前尝试的办法有："><a href="#在这个问题解决之前尝试的办法有：" class="headerlink" title="在这个问题解决之前尝试的办法有："></a>在这个问题解决之前尝试的办法有：</h2><ol><li><p>疑似跨域问题：</p><pre><code> 修改`html2canvas` 的配置，使用`&#123;useCORS:true&#125;`     --无效</code></pre></li><li><p>意思元素样式问题</p><pre><code>  修改dom样式为绝对值，去除百分比以及相对定位  --无效</code></pre></li></ol><blockquote><p>求人之前先百度找到了一个网上教程，解决方法如下</p></blockquote><p>可以看到：<code>preserveDrawingBuffer = false</code><br><img src="https://upload-images.jianshu.io/upload_images/14889312-35fb15a48457a2a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>在框架中使用的话比较麻烦，同时也不能成功，于是通过看官方文档</p><blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决这个问题只需要在 three 的 renderer 的配置中的<code>preserveDrawingBuffer</code>设置为<code>true</code>就好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">initRender</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">renderer</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">        <span class="comment">//增加下面两个属性，可以抗锯齿</span></span><br><span class="line">        <span class="attr">antialias</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//将这个属性改为True可以解决截图为黑色的问题</span></span><br><span class="line">        <span class="attr">preserveDrawingBuffer</span>: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> width = <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;canvas&quot;</span>].<span class="property">clientWidth</span>;</span><br><span class="line">      <span class="keyword">let</span> height = <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;canvas&quot;</span>].<span class="property">clientHeight</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">setSize</span>(width, height); <span class="comment">//设置渲染区域尺寸</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">setClearColor</span>(<span class="number">0xe5e5e5</span>, <span class="number">1</span>); <span class="comment">//设置背景颜色</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;canvas&quot;</span>].<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">domElement</span>); <span class="comment">//body元素中插入canvas对象</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><hr><h2 id="But"><a href="#But" class="headerlink" title="But"></a><strong><code>But</code></strong></h2><p>在<a href="https://blog.csdn.net/skillart/article/details/121472419">博客 </a>中看到下面内容，还需要你们自己测试一下</p><blockquote><p>只是为了截图设置 preserveDrawingBuffer 为 true，会导致性能下降。<br>大概就是 preserveDrawingBuffer 为 true 的时候，需要从 A 缓冲区复制到 B 缓冲。<br>为 false 的时候是，交换双缓冲，比较快。<br>方法就是获取截图的时候调用 renderer.render()，不让 canvas 清空就可以不用设置 preserveDrawingBuffer 为 true 了。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小白搭建之部分填坑</title>
      <link href="/2022/04/26/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E4%B9%8B%E9%83%A8%E5%88%86%E5%A1%AB%E5%9D%91/"/>
      <url>/2022/04/26/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E4%B9%8B%E9%83%A8%E5%88%86%E5%A1%AB%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="代码仓库地址：webpack-react-redux-es6"><a href="#代码仓库地址：webpack-react-redux-es6" class="headerlink" title="代码仓库地址：webpack+react+redux+es6"></a>代码仓库地址：<a href="https://github.com/OneOar/webpack-react-redux-es6">webpack+react+redux+es6</a></h2><h3 id="最开始拿已经写好的配置来给大家讲解，部分代码，没做解释，在后期的尝试中有些朋友会遇见坑，先给大家讲两个坑吧，如有其他的，欢迎交流探讨"><a href="#最开始拿已经写好的配置来给大家讲解，部分代码，没做解释，在后期的尝试中有些朋友会遇见坑，先给大家讲两个坑吧，如有其他的，欢迎交流探讨" class="headerlink" title="最开始拿已经写好的配置来给大家讲解，部分代码，没做解释，在后期的尝试中有些朋友会遇见坑，先给大家讲两个坑吧，如有其他的，欢迎交流探讨"></a>最开始拿已经写好的配置来给大家讲解，部分代码，没做解释，在后期的尝试中有些朋友会遇见坑，先给大家讲两个坑吧，如有其他的，欢迎交流探讨</h3><h3 id="坑一-："><a href="#坑一-：" class="headerlink" title="坑一 ："></a>坑一 ：</h3><ul><li>描述： 当开发模式换为<code>production</code> 时,即下方命令时，控制台输入<code>npm start</code> 会在浏览器上显示报错信息</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json 更改了dev的--mode development为 --mode production</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;npm run dev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --mode production --config webpack.dev.config.js --open &quot;</span>,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>报错为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Failed <span class="selector-tag">to</span> compile.</span><br><span class="line">asset size limit: The following <span class="built_in">asset</span>(s) exceed the recommended size limit (<span class="number">244</span> KiB).</span><br><span class="line">This can impact web performance.</span><br><span class="line">Assets:</span><br><span class="line">bundle.js (<span class="number">963</span> KiB)</span><br></pre></td></tr></table></figure><ul><li>解决办法：在配置文件<code>webpack.dev.config.js</code>中加入如下配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">performance</span>: &#123;</span><br><span class="line">  <span class="attr">hints</span>: <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="坑二："><a href="#坑二：" class="headerlink" title="坑二："></a>坑二：</h3><ul><li>描述：配置好了如下图片的 loader 但是不能在浏览器上正确显示，除非使用<code>require（&#39;路径&#39;）</code>的格式讲图片加载获取到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line"> &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|svg)$/</span>,</span><br><span class="line">                use :&#123;</span><br><span class="line">                     <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">                     <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">8192</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&quot;[name].[ext]&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决办法：打开浏览器控制台可以发现，原来资源文件并没有被打包到项目的构建目录中，因此使用插件<code>copy-webpack-plugin</code>，将本地资源文件 copy 到构建目录中去</li></ul><ul><li>安装依赖</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D <span class="built_in">copy</span>-webpack-plugin</span><br></pre></td></tr></table></figure><ul><li>配置<code>webpack.dev.config.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);  <span class="comment">//请求依赖</span></span><br><span class="line"><span class="comment">//省略其他配置</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"> <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>([</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">from</span>:__dirname+<span class="string">&quot;/images&quot;</span>,   <span class="comment">//定义要拷贝的源目录</span></span><br><span class="line">                <span class="attr">to</span>:__dirname+<span class="string">&quot;/static/images&quot;</span>,  <span class="comment">//定义要拷贝到的目标目录</span></span><br><span class="line">                <span class="attr">force</span>: <span class="literal">true</span>   <span class="comment">//强制覆盖先前的插件</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]),</span><br><span class="line"></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小白搭建webpack+react+redux+es6（三）</title>
      <link href="/2022/04/26/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BAwebpack+react+redux+es6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/04/26/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BAwebpack+react+redux+es6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="代码仓库地址：webpack-react-redux-es6"><a href="#代码仓库地址：webpack-react-redux-es6" class="headerlink" title="代码仓库地址：webpack+react+redux+es6"></a>代码仓库地址：<a href="https://github.com/OneOar/webpack-react-redux-es6">webpack+react+redux+es6</a></h2><h2 id="上篇文章有个坑，有个axios的报错-当时是已经配置好的环境，写文档的时候马虎了没删除，安装这个依赖就好了，本文也会介绍如何使用"><a href="#上篇文章有个坑，有个axios的报错-当时是已经配置好的环境，写文档的时候马虎了没删除，安装这个依赖就好了，本文也会介绍如何使用" class="headerlink" title="上篇文章有个坑，有个axios的报错,当时是已经配置好的环境，写文档的时候马虎了没删除，安装这个依赖就好了，本文也会介绍如何使用"></a>上篇文章有个坑，有个<code>axios</code>的报错,当时是已经配置好的环境，写文档的时候马虎了没删除，安装这个依赖就好了，本文也会介绍如何使用</h2><ul><li>安装 axios 依赖</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>此时你就能使用 RESTful API 去 get、put 等方式去请求数据了</p><ul><li>配置<code>webpack.dev.config.js</code>的服务器端配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浏览器配置</span></span><br><span class="line">   <span class="attr">devServer</span>: &#123;</span><br><span class="line">       <span class="attr">port</span>: <span class="number">8888</span>,</span><br><span class="line">       <span class="attr">contentBase</span>: <span class="string">&#x27;./public&#x27;</span>,</span><br><span class="line">       <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="attr">openPage</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="comment">//后台数据请求接口配置</span></span><br><span class="line">       <span class="attr">proxy</span>: &#123;</span><br><span class="line">           <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">               <span class="attr">target</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">               <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">               <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                   <span class="string">&quot;/api/&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">overlay</span>: &#123;</span><br><span class="line">           <span class="attr">warnings</span>: <span class="literal">true</span>,</span><br><span class="line">           <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置了请求端口没有数据也是不开心的，那么接下来就使用 json-server 和 faker.js 来创建模拟数据</p><ul><li>安装依赖</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install  json-server</span><br><span class="line">npm install faker</span><br></pre></td></tr></table></figure><ul><li>在<code>js</code>文件夹下创建文件夹<code>mock</code>并在线创建一个<code>db.js</code>文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.js</span></span><br><span class="line"><span class="keyword">const</span> faker = <span class="built_in">require</span>(<span class="string">&quot;faker&quot;</span>);</span><br><span class="line">faker.<span class="property">locale</span> = <span class="string">&quot;zh_CN&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> education = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;初中&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: faker.<span class="property">random</span>.<span class="title function_">uuid</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;高中&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: faker.<span class="property">random</span>.<span class="title function_">uuid</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;大学&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: faker.<span class="property">random</span>.<span class="title function_">uuid</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;硕士&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: faker.<span class="property">random</span>.<span class="title function_">uuid</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;博士&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: faker.<span class="property">random</span>.<span class="title function_">uuid</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    education,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>修改配置<code>package.json</code>的<code>scripts</code>命令，添加</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;mock&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server js/mock/db.js&quot;</span></span><br></pre></td></tr></table></figure><p>执行 <code>npm run mock</code>,浏览器打开<code>http://localhost:3000/education</code>界面,你可以在界面上看到数据</p><ul><li>接下来请求数据，修改文件<code>js/components/count/index.js</code>文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> connect <span class="keyword">from</span> <span class="string">&quot;@con&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">education</span>: [],</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">uNSAFE_componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//后台数据请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/education&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">education</span>: res.<span class="property">data</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 选择框选择事件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">value</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.add()&#125;&gt;点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下面选择框是请求服务器拿到的数据<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.education</span></span><br><span class="line"><span class="language-xml">            ? this.state.education.map((data, i) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                return (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;data.value&#125;</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;data.label&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                );</span></span><br><span class="line"><span class="language-xml">              &#125;)</span></span><br><span class="line"><span class="language-xml">            : &quot;&quot;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="string">&quot;count&quot;</span>)(<span class="title class_">Count</span>);</span><br></pre></td></tr></table></figure><ul><li>这就是请求的一个例子，在界面会发现一个下拉框，里面的数据就是通过请求<code>http://localhost:3000/education</code>得到的数据。</li></ul><p>此处讲完了请求数据和创建测试数据，接下来将会讲如何创建多界面应用。</p></li></ul><h1 id="安装-react-router-相关依赖"><a href="#安装-react-router-相关依赖" class="headerlink" title="安装 react-router 相关依赖"></a>安装 react-router 相关依赖</h1><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-router react-router-dom -S</span><br></pre></td></tr></table></figure><ul><li>在<code>js/components</code>创建一个类似于 count 的文件夹及其下面的文件内容。创建<code>js/components/route.jsx</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//route.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">HashRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  <span class="title class_">Redirect</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Count</span>, <span class="title class_">Like</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./index.jsx&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/like&quot;</span> <span class="attr">replace</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        走你</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Count&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/like&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Like&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure><ul><li>修改界面<code>js/index.jsx</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&quot;./components/route.jsx&quot;</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span>&#123;routes&#125;<span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>reducers.js</code>和<code>connects.js</code>,在按需添加中加入新建的文件 like</li><li><code>Attention</code>:redux 中 like 文件下的目录结构要跟 count 的一样</li></ul><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>综上三文，除样式外，所有的配置都已涉及到，各文件的函数功能未详细描述，请自查官档，这里不作描述，谢谢大家</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小白搭建webpack+react+redux+es6（二）</title>
      <link href="/2022/04/26/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BAwebpack+react+redux+es6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/04/26/%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BAwebpack+react+redux+es6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="代码仓库地址：webpack-react-redux-es6"><a href="#代码仓库地址：webpack-react-redux-es6" class="headerlink" title="代码仓库地址：webpack+react+redux+es6"></a>代码仓库地址：<a href="https://github.com/OneOar/webpack-react-redux-es6">webpack+react+redux+es6</a></h2><p><code>样式配置稍提一下</code></p><h1 id="配置-css-和修改webpack-dev-config-js"><a href="#配置-css-和修改webpack-dev-config-js" class="headerlink" title="配置 css 和修改webpack.dev.config.js"></a>配置 css 和修改<code>webpack.dev.config.js</code></h1><ul><li>安装 css-loader 和 style-loader 作为 dev 依赖项</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure><ul><li>配置<code>webpack.dev.config.js</code>处理 css</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            <span class="attr">use</span>: &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">presets</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;es2015&#x27;</span>, <span class="string">&#x27;stage-0&#x27;</span>],</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><h1 id="配置-redux-环境和-redux-thunk"><a href="#配置-redux-环境和-redux-thunk" class="headerlink" title="配置 redux 环境和 redux-thunk"></a>配置 redux 环境和 redux-thunk</h1><ul><li>安装依赖</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux react-redux</span><br><span class="line">npm install --save redux-thunk</span><br></pre></td></tr></table></figure><ul><li>在文件夹<code>js/redux</code>下新建三个文件，combineStates.js,connect.js,reducers.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//combineStates.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; initialState, getNewState &#125;) =&gt;</span><br><span class="line">  <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> (&#123;</span><br><span class="line">    ...state,</span><br><span class="line">    ...(<span class="title function_">getNewState</span>(state, action) || &#123;&#125;),</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//connect.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./count/action&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">//按需写入，上方有引入</span></span><br><span class="line">  count,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reduceObjects</span> = (<span class="params">objArr</span>) =&gt;</span><br><span class="line">  objArr.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">a, b</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...a,</span><br><span class="line">      ...b,</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (...keys) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span> &amp;&amp; !keys.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;connect requires keys!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (keys.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">connect</span>(</span><br><span class="line">      <span class="function">(<span class="params">state</span>) =&gt;</span> state[key],</span><br><span class="line">      <span class="function">(<span class="params">dispatch</span>) =&gt;</span> <span class="title function_">bindActionCreators</span>(actions[key], dispatch)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">connect</span>(</span><br><span class="line">    <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="title function_">reduceObjects</span>(keys.<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> state[key])),</span><br><span class="line">    <span class="function">(<span class="params">dispatch</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">reduceObjects</span>(</span><br><span class="line">        keys.<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> <span class="title function_">bindActionCreators</span>(actions[key], dispatch))</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reducers.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> combineStates <span class="keyword">from</span> <span class="string">&quot;./CombineStates&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./count/reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducers = &#123;</span><br><span class="line">  <span class="comment">//按需引入</span></span><br><span class="line">  count,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(reducers).<span class="title function_">forEach</span>(</span><br><span class="line">  <span class="function">(<span class="params">key</span>) =&gt;</span> (reducers[key] = <span class="title function_">combineStates</span>(reducers[key]))</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">  ...reducers,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>配置<code>webpack.dev.config.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"> <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">//路径重写</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@con&quot;</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;js/redux/connect.js&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.jsx&quot;</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><ul><li>新建一个名叫<code>count</code>的文件夹，在下面新建三个文件，分别为 action.js, type.js, reducer.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//action.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Type</span> <span class="keyword">from</span> <span class="string">&quot;./type&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="built_in">setTimeout</span>(res, time));</span><br><span class="line"><span class="keyword">var</span> self = &#123;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">() =&gt;</span> <span class="keyword">async</span> (dispatch) =&gt; &#123;</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    <span class="comment">// await sleep(2000) 延时操作</span></span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Type</span>.<span class="property">add</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> self;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reducer.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Type</span> <span class="keyword">from</span> <span class="string">&quot;./type&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getNewState</span> = (<span class="params">state = initialState, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Type</span>.<span class="property">add</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  initialState,</span><br><span class="line">  getNewState,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//type.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">add</span>: <span class="string">&quot;add&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>配置<code>js/index.js</code>文件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">&quot;./redux/reducers.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Count</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./components/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求端口总配置</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;/api&quot;</span>;</span><br><span class="line"><span class="comment">// 请求设置拦截</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">ajax</span> = axios;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> composedCreateStore = <span class="title function_">compose</span>(</span><br><span class="line">  <span class="title function_">applyMiddleware</span>(thunk),</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">devToolsExtension</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">devToolsExtension</span>()</span><br><span class="line">)(createStore);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">composedCreateStore</span>(reducers, &#123;&#125;);</span><br><span class="line"><span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Count</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>在<code>js/components</code>下新建 count 文件夹，在下面新建<code>index.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> connect <span class="keyword">from</span> <span class="string">&quot;@con&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">compomentWillMount</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.add()&#125;&gt;加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="string">&quot;count&quot;</span>)(<span class="title class_">Count</span>);</span><br></pre></td></tr></table></figure><ul><li>新建并编辑<code>js/components/index.jsx</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&quot;./count&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Count</span> &#125;;</span><br></pre></td></tr></table></figure><p>此时 redux 也可以直接使用了，此时只是对单界面使用，接下来将介绍如何使用<code>react-router</code>搭建多界面应用和使用<code>json-server</code>创建 mock 测试数据</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记</title>
      <link href="/2022/04/26/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/26/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><ol><li>this 在 javascript 中的具体指向</li></ol></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14889312-632228c2df5a5786.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><ol start="2"><li>数组对象的遍历操作</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[&#123;<span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;rose&quot;</span>&#125;]</span><br><span class="line"> <span class="title class_">Array</span>.<span class="title function_">from</span>(arr,<span class="function">(<span class="params">&#123;name&#125;</span>)=&gt;</span>name&#125;)  <span class="comment">//[&quot;jack&quot;,&quot;rose&quot;]</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function"><span class="params">r</span>=&gt;</span>r.<span class="property">name</span>)  <span class="comment">//[&#x27;jack&#x27;,&#x27;rose&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>css 动画和 js 动画的差异</li></ol></blockquote><ul><li>代码复杂度，js 动画相对复杂一些</li><li>动画运行时，js 能更好的控制动画的启动、暂停、取消、终止等操作，css 动画不能添加事件</li><li>动画性能，js 多了一个 js 解析的过程，性能不如 css 动画好</li></ul><blockquote><p>4.事件委托,目的,功能,写法</p></blockquote><ul><li>把一个或者一组元素的事件委托到它的父层或者更外层的元素上</li><li>优点：减少内存消耗，动态绑定事件</li><li>target 是触发事件的最具体元素，currenttarget 是绑定事件的元素，在函数中一般等于 this</li></ul><blockquote><ol start="5"><li>跨域问题，谁限制的跨域，怎么解决</li></ol></blockquote><ul><li>浏览器的<code>同源策略</code>导致了跨域，只要<code>协议不同</code>（http，https)，<code>主域名不同</code>（baidu.com，google.com），<code>子域名不同</code>（<a href="http://www.baidu.com,http//blog.baidu.com%EF%BC%89%E4%BB%A5%E5%8F%8A%60%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%8D%E5%90%8C%60%EF%BC%88test.com:8080%EF%BC%8Ctest.com:8081)%E9%83%BD%E7%AE%97%E6%98%AF%60%E8%B7%A8%E5%9F%9F%60">http://www.baidu.com，http://blog.baidu.com）以及`端口号不同`（test.com:8080，test.com:8081)都算是`跨域`</a></li><li>用于隔离潜在的恶意文件的重要安全机制</li><li>jsonp，允许 script 加载第三方资源</li><li>nginx 的反向代理</li><li>iframe 嵌套通讯,postmessage</li></ul><blockquote><p>6.javascript 中常见的内存泄漏</p></blockquote><ul><li>内存泄漏是指用不到（访问不到）的变量，一直存在占据着空间，不能再次被利用起来</li><li>全局变量，周期函数，dom 节点的临时引用等<blockquote><p>7.浅拷贝和深拷贝的问题</p></blockquote></li><li>两者都是针对 Object 和 Array 这样的复杂类型的</li><li>浅拷贝一定意义上来说就是只拷贝对象的首层元素，多层对象，只会拷贝对象的地址，更改一个对象的值也会影响另一个对象,常见的函数有<code>Object.assign()</code>,<code>Array.prototype.slice()</code>以及 ES6 的扩展运算符<code>...</code><br>例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小许&quot;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;大许&quot;</span>;</span><br><span class="line">obj2.<span class="property">friend</span>.<span class="property">name</span> = <span class="string">&quot;rose&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1, obj2);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14889312-48c9011c5b672ad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>深拷贝是指一层一层的拷贝对象或数组，拷贝出来的对象完全是一个新的对象，改变任何值都不会影响原数组。常用的方法是<code>递归遍历</code>跟<code>JSON.stringfy()</code>,当然还有一些第三方插件库<code>lodash.clonedeep</code>,原理也是递归</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝 es6版本</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="comment">// hash表，记录所有的对象的引用关系</span></span><br><span class="line">  <span class="keyword">let</span> copyedMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">isArray</span> = (<span class="params">target</span>) =&gt; target <span class="keyword">instanceof</span> <span class="title class_">Array</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">isObject</span> = (<span class="params">target</span>) =&gt; target <span class="keyword">instanceof</span> <span class="title class_">Object</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历方法，支持数组与对象</span></span><br><span class="line">  <span class="keyword">let</span> each = <span class="keyword">function</span> (<span class="params">list, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isArray</span>(list)) &#123;</span><br><span class="line">      list.<span class="title function_">forEach</span>(callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isObject</span>(list)) &#123;</span><br><span class="line">      <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(list);</span><br><span class="line">      keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(list[key], key, list);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拷贝方法</span></span><br><span class="line">  <span class="keyword">let</span> copy = <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isArray</span>(item) || <span class="title function_">isObject</span>(item)) &#123;</span><br><span class="line">      <span class="comment">// 检查是否循环引用，防止死循环</span></span><br><span class="line">      <span class="keyword">let</span> existed = copyedMap.<span class="title function_">get</span>(item);</span><br><span class="line">      <span class="keyword">if</span> (existed) &#123;</span><br><span class="line">        <span class="keyword">return</span> existed;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 递归拷贝</span></span><br><span class="line">      <span class="keyword">let</span> result = <span class="title function_">isArray</span>(item) ? [] : &#123;&#125;;</span><br><span class="line">      copyedMap.<span class="title function_">set</span>(item, result);</span><br><span class="line">      <span class="title function_">each</span>(item, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">        result[key] = <span class="title function_">copy</span>(value);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">copy</span>(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//let datasource =JSON.parse(JSON.stringify(target));</span></span><br><span class="line"><span class="comment">//该方法会忽略掉值为 undefined 的属性以及函数表达式，但不会忽略值为 null 的属性。</span></span><br></pre></td></tr></table></figure><blockquote><p>8.闭包的写法，闭包的作用，闭包的缺点</p></blockquote><ul><li>使用闭包的目的是为了隐藏变量，一个函数 a 里面有一个函数 b，就可以称函数 b 为闭包函数</li><li>由于这些变量始终保存在内存中，不会随着函数的结束而自动销毁。闭包容易造成内存泄漏，闭包在 IE 上不能使用后回收</li></ul><blockquote><ol start="9"><li>babel 把 ES6 转 ES5 或者 ES3 的原理是什么</li></ol></blockquote><ul><li>它就是个编译器，输入的是 ES6，输出的是 ES5</li><li>解析：将代码字符串解析称抽象语法树</li><li>变换：对抽象语法树进行变换操作</li><li>再建：根据变换后的抽象语法树再生成代码字符串</li></ul><blockquote><p>10.数据可视化做过吗</p></blockquote><ul><li>Echart，antV，DataV 等工具<blockquote><p>11.export 和 export default 的区别？</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  xxx</span><br><span class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">&#x27;./&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> xxx</span><br><span class="line"><span class="keyword">import</span> &#123;xxx&#125; <span class="keyword">from</span> <span class="string">&#x27;./&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="12"><li>前后端通信用什么</li></ol></blockquote><ul><li>axios<br>设置拦截</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">　　　　<span class="comment">//shezhiqingqiudonghua</span></span><br><span class="line">       config.<span class="property">headers</span>.<span class="property">authorization</span> =<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">TOKEN</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line">　　　　<span class="keyword">return</span> config</span><br><span class="line">　　&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">　　&#125;)</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//取消动画</span></span><br><span class="line">     <span class="keyword">if</span> (res.<span class="property">headers</span>.<span class="property">authorization</span>) &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">TOKEN</span>, res.<span class="property">headers</span>.<span class="property">authorization</span>);</span><br><span class="line">      axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&quot;authorization&quot;</span>] = res.<span class="property">headers</span>.<span class="property">authorization</span>;</span><br><span class="line">    &#125;</span><br><span class="line">　　　　<span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">201</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">　　&#125;)</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/url&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">　　&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>13.Http 状态码的含义</p></blockquote><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>xx(临时响应)</span><br><span class="line"></span><br><span class="line"><span class="number">100</span>: 请求者应当继续提出请求。</span><br><span class="line"></span><br><span class="line"><span class="number">101</span>(切换协议) 请求者已要求服务器切换协议，服务器已确认并准备进行切换。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>xx(成功)</span><br><span class="line"></span><br><span class="line"><span class="number">200</span>：正确的请求返回正确的结果</span><br><span class="line"></span><br><span class="line"><span class="number">201</span>：表示资源被正确的创建。比如说，我们 POST 用户名、密码正确创建了一个用户就可以返回 <span class="number">201</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">202</span>：请求是正确的，但是结果正在处理中，这时候客户端可以通过轮询等机制继续请求。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>xx(已重定向)</span><br><span class="line"></span><br><span class="line"><span class="number">300</span>：请求成功，但结果有多种选择。</span><br><span class="line"></span><br><span class="line"><span class="number">301</span>：请求成功，但是资源被永久转移。</span><br><span class="line"></span><br><span class="line"><span class="number">303</span>：使用 GET 来访问新的地址来获取资源。</span><br><span class="line"></span><br><span class="line"><span class="number">304</span>：请求的资源并没有被修改过</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>xx(请求错误)</span><br><span class="line"></span><br><span class="line"><span class="number">400</span>：请求出现错误，比如请求头不对等。</span><br><span class="line"></span><br><span class="line"><span class="number">401</span>：没有提供认证信息。请求的时候没有带上 Token 等。</span><br><span class="line"></span><br><span class="line"><span class="number">402</span>：为以后需要所保留的状态码。</span><br><span class="line"></span><br><span class="line"><span class="number">403</span>：请求的资源不允许访问。就是说没有权限。</span><br><span class="line"></span><br><span class="line"><span class="number">404</span>：请求的内容不存在。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>xx(服务器错误)</span><br><span class="line"></span><br><span class="line"><span class="number">500</span>：服务器错误。</span><br><span class="line"></span><br><span class="line"><span class="number">501</span>：请求还没有被实现。</span><br></pre></td></tr></table></figure><h1 id="CSS-问题"><a href="#CSS-问题" class="headerlink" title="CSS 问题"></a>CSS 问题</h1><blockquote><ol><li>calc,support,media 各自的含义跟用法</li></ol></blockquote><ul><li><p>@support 主要用于检测浏览器是否支持某个 css 的属性，主要是条件判断，如果不支持换套样式</p></li><li><p>calc()函数主要是用来动态计算页面值，可以 <code>&quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot; </code>等运算，<code>符号两边要有空格</code></p></li><li><p>@media 查询，针对不同的媒体类型定义不同的样式</p><blockquote><ol start="2"><li>css 水平、垂直居中的写法。至少四种</li></ol></blockquote></li><li><p>水平居中</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*块：flex*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 块：margin */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> aoto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 块：绝对定位 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  tranform: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 行：text-align */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>垂直居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*块：flex*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 块：margin */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> aoto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 块：绝对定位 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  tranform: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 行：text-align */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.画一条 0.5px 的直线</p></blockquote><ul><li>主要是考查 css 的 transform</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.画一个三角形</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent <span class="number">#eee</span> transparent transparent;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>5 . 清除浮动</p></blockquote><ul><li>1.使用 clear：both，即额外标签法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fahter</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid deeppink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: darkorange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.small</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: darkmagenta;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: darkslateblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clear</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fahter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span>big<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>small<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>额外标签法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们清除了浮动，父元素自动检测子盒子最高的高度，然后与其同高。</p><p>优点：通俗易懂，方便</p><p>缺点：添加无意义标签，语义化差</p><ul><li>2.overflow:hidden 父元素添加<br>通过触发 BFC 方式，实现清除浮动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.fahter&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    border: 1px solid deeppink;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：代码简洁</p><p>缺点：内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素</p><ul><li>3.使用伪元素:after 清除浮动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> .clearfix:after&#123;/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        height: 0;</span><br><span class="line">        clear:both;</span><br><span class="line">        visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    .clearfix&#123;</span><br><span class="line">        *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;fahter clearfix&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">        &lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>优点：符合闭合浮动思想，结构语义化正确</p><p>缺点：ie6-7 不支持伪元素：after，使用 zoom:1 触发 hasLayout.</p><ul><li><ol start="4"><li>使用 before 和 after 双伪元素清除浮动</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> .clearfix:after,.clearfix:before&#123;</span><br><span class="line">       content: &quot;&quot;;</span><br><span class="line">       display: table;</span><br><span class="line">   &#125;</span><br><span class="line">   .clearfix:after&#123;</span><br><span class="line">       clear: both;</span><br><span class="line">   &#125;</span><br><span class="line">   .clearfix&#123;</span><br><span class="line">       *zoom: 1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;fahter clearfix&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">       &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>优点：代码更简洁</p><p>缺点：用 zoom:1 触发 hasLayout.</p><h1 id="Dom-相关"><a href="#Dom-相关" class="headerlink" title="Dom 相关"></a>Dom 相关</h1><blockquote><ol><li>说一下<label>标签的用法</li></ol></blockquote><ul><li>label 标签主要是方便鼠标点击使用，扩大可点击的范围，增强用户操作体验<blockquote><ol start="2"><li>说一下继承的几种方式及优缺点</li></ol></blockquote></li><li>继承方式</li></ul><ol><li> 借用构造函数（类式继承），使用 call，apply 方法，将父对象的构造函数绑在子对象上</li><li> 原型继承，将子对象的 prototype 指向父元素的一个实例</li><li> 组合继承</li></ol><ul><li>优缺点</li></ul><ol><li>原型链继承的缺点：字面量会中断关系，使用引用类型的原型，并且子类型还无法给超类型传递参数</li></ol><h1 id="Webpack-相关"><a href="#Webpack-相关" class="headerlink" title="Webpack 相关"></a>Webpack 相关</h1><blockquote><p>1.前端为何要进行代码构建跟打包</p></blockquote><ul><li><p>代码方面：</p><p>体积更小（Tree-Shaking、压缩、合并），加载更快<br>编译高级语言或语法（TS,ES6+,模块化，scss）<br>兼容性和错误检查（Polyfilll, postcss, eslint）</p></li><li><p>研发流程方面：</p><p>统一、高效的开发环境<br>统一的构建流程和产出标准<br>集成公司构建规范（体测、上线等）</p></li></ul><blockquote><p>2.module、chunk、bundle 分别是什么意思，有何区别</p></blockquote><ul><li><p>答案</p><pre><code>module -- 各个源码文件，webpack 中一切皆模块chunk -- 多模块合并成的，如 entry import() splitChunkbundle -- 最终的输出文件</code></pre><blockquote><p>3.loader 和 plugin 的区别</p></blockquote></li><li><p>答案：</p><p>loader：模块转换器，如 less –&gt; css, 如识别 js 结尾的，css 结尾的，图片格式结尾的，通过 loader 转换成相应的文件格式</p><p>plugin：扩展插件，如 HtmlWebpackPlugin</p></li></ul><blockquote><p>4、webpack 常见性能优化</p></blockquote><pre><code>webpack 优化构建速度（可用于生产）    优化 babel-loader    IgnorePlugin    noParse    happyPack    ParallelUgligyPluginwebpack 优化构建速度（不可用于生产）    自动刷新    热更新    DllPluginwebpack 优化产出代码    小图片 base64 编码    bundle 加 hash    懒加载    提取公共代码    使用 CDN 加速    IgnorePlugin    使用 Production    Scope Hosting</code></pre><blockquote><p>9、babel-runtime 和 babel-polyfill 的区别</p></blockquote><pre><code>babel-polyfill 会污染全局babel-runtime 不会污染全局产出第三方 lib 要用 babel-runtime</code></pre><h1 id="React-相关"><a href="#React-相关" class="headerlink" title="React 相关"></a>React 相关</h1><blockquote><ol><li>区分 Real DOM 跟 Virtual DOM</li></ol></blockquote><table><thead><tr><th>Real DOM</th><th align="right">Virtual DOM</th></tr></thead><tbody><tr><td>1.更新缓慢</td><td align="right">1.更新更快</td></tr><tr><td>2.刷新整个 HTML 文档</td><td align="right">2.更新部分节点</td></tr><tr><td>3.DOM 操作代价高</td><td align="right">3.DOM 操作非常简单</td></tr><tr><td>4.消耗内存较高</td><td align="right">4.消耗内存较小</td></tr></tbody></table><blockquote><p>2.什么是 React？</p></blockquote><ul><li><p>React 是 FaceBook 在 2011 年开发的前端 Javascript 库</p></li><li><p>它遵循基于组件的方法，有助于构建可重用的 UI 组件库</p></li><li><p>主要功能如下</p><ul><li>使用的是 <strong><code>虚拟DOM</code></strong>,而不是真正的 DOM</li><li>可以服务器端渲染</li><li>遵循单项数据流或数据绑定</li></ul></li><li><p>优点：</p><ul><li>提高开发的应用的性能</li><li>可以方便的在服务端跟客户端使用</li><li>由于是 JSX，代码可读性很高</li><li>React 很容易与 Meteor，Angular 等其他框架集成</li><li>使用 React，编写 UI 测试用例变得非常容易</li></ul></li><li><p>缺点</p><ul><li>React 只是一个库，不是一个完整的框架</li><li>它的库非常庞大，需要一段时间理解</li><li>新手程序员很难理解</li><li>编码变得复杂，因为它使用内联模板和 JSX</li></ul></li></ul><blockquote><p>3.什么是 JSX？</p></blockquote><pre><code>JSX是Javascript XML的简写，是React使用的一种文件，它利用Javascript的表现力跟HTML的模板语法。使得HTML文件很容易理解，此文件使得应用非常可靠</code></pre><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">View</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Components</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.为什么浏览器无法读取 JSX？</p></blockquote><pre><code>浏览器只能处理Javascript对象，不能读取Javascript常规对象中的JSX，为了使浏览器能读取JSX，首先要用Babel这样的JSX语法转换器将JSX文件转换为Javascript对象。然后再传给浏览器</code></pre><blockquote><p>5.什么是 props？</p></blockquote><pre><code>Props 是 React 中属性的简写。它们是只读组件，必须保持纯，即不可变。它们总是在整个应用中从父组件传递到子组件。子组件永远不能将 prop 送回父组件。这有助于维护单向数据流，通常用于呈现动态生成的数据。</code></pre><blockquote><p>6.React 中的状态是什么？它是如何使用的？</p></blockquote><pre><code>状态是 React 组件的核心，是数据的来源，必须尽可能简单。基本上状态是确定组件呈现和行为的对象。与props 不同，它们是可变的，并创建动态和交互式组件。可以通过 this.state,this.setState() 操作它们。</code></pre><blockquote><ol start="7"><li>详细解释 React 组件的生命周期方法</li></ol></blockquote><pre><code>一些最重要的生命周期方法是：uNSAFE_componentWillMount() – 在渲染之前执行，在客户端和服务器端都会执行。componentDidMount() – 仅在第一次渲染后在客户端执行。componentWillReceiveProps() – 当从父类接收到 props 并且在调用另一个渲染器之前调用。shouldComponentUpdate() – 根据特定条件返回 true 或 false。如果你希望更新组件，请返回true 否则返回 false。默认情况下，它返回 true。componentWillUpdate() – 在 DOM 中进行渲染之前调用。componentDidUpdate() – 在渲染发生后立即调用。componentWillUnmount() – 从 DOM 卸载组件后调用。用于清理内存空间。</code></pre><blockquote><ol start="8"><li>你对 React 的 refs 有什么了解？</li></ol></blockquote><p>Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render() 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReferenceDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">inputDemo</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;disp&quot;</span>).<span class="property">innerHTML</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;(input)</span> =&gt;</span> (this.inputDemo = input)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&quot;Click&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.display&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Click</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Hello <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;disp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> !!!</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="9"><li>什么是高阶组件（HOC）？</li></ol></blockquote><p>高阶组件是重用组件逻辑的高级方法，是一种源于 React 的组件模式。 HOC 是自定义组件，在它之内包含另一个组件。它们可以接受子组件提供的任何动态，但不会修改或复制其输入组件中的任何行为。你可以认为 HOC 是“纯（Pure）”组件。</p><blockquote><ol start="10"><li>你能用 HOC 做什么？</li></ol></blockquote><pre><code>HOC可用于许多任务，例如：    代码重用，逻辑和引导抽象    渲染劫持    状态抽象和控制    Props 控制</code></pre><blockquote><p>11.列出 Redux 的组件。</p></blockquote><pre><code>Redux 由以下组件组成：Action – 这是一个用来描述发生了什么事情的对象。Reducer – 这是一个确定状态将如何变化的地方。Store – 整个程序的状态/对象树保存在Store中。View – 只显示 Store 提供的数据。</code></pre><blockquote><p>12.为什么 React Router v4 中使用 switch 关键字 ？</p></blockquote><p>虽然 <strong>&lt;div&gt;</strong> 用于封装 Router 中的多个路由，当你想要仅显示要在多个定义的路线中呈现的单个路线时，可以使用 “switch” 关键字。使用时，<strong>&lt;switch&gt;</strong> 标记会按顺序将已定义的 URL 与已定义的路由进行匹配。找到第一个匹配项后，它将渲染指定的路径。从而绕过其它路线</p><blockquote><p>13.显示文件上传进度</p></blockquote><p><code>axios</code>使用 onUploadProgress 实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> self = <span class="variable language_">this</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">axios</span></span><br><span class="line">  .<span class="title function_">put</span>(<span class="variable language_">this</span>.<span class="property">uploadUrl</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>], &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">transformRequest</span>: [</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">onUploadProgress</span>: <span class="function">(<span class="params">progressEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> complete =</span><br><span class="line">        (((progressEvent.<span class="property">loaded</span> / progressEvent.<span class="property">total</span>) * <span class="number">100</span>) | <span class="number">0</span>) + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">      self.<span class="property">uploadMessage</span> = <span class="string">&quot;上传 &quot;</span> + complete;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      self.<span class="property">uploadMessage</span> = <span class="string">&quot;上传成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VS CODE常用插件</title>
      <link href="/2022/04/26/vsCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/04/26/vsCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本人使用的 VsCode 插件如下(仅供参考，可自行取舍)：</p><p><strong>Auto Close Tag</strong></p><p>自动闭合标签</p><p><strong>Auto Rename Tag</strong></p><p>自动重新命名配对的 HTML / XML 标签</p><p><strong>Beautify</strong></p><p>在 Visual Studio 代码中美化 JavaScript，JSON，CSS，Sass 和 HTML。</p><p><strong>Bracket Pair Colorizer</strong></p><p>该扩展允许使用颜色标识匹配的括号。 用户可以定义要匹配的字符以及要使用的颜色。</p><p><strong>Chinese (Simplified) Language Pack for Visual Studio Code</strong></p><p>适用于 VS Code 的中文（简体）语言包</p><p><strong>Code Runner</strong></p><p>运行多种语言的代码片段或代码文件</p><p><strong>CodeMetrics</strong></p><p>计算 TypeScript / JavaScript / Lua 文件的复杂性。</p><p><strong>Debugger for Chrome</strong></p><p>在 Chrome 浏览器或任何其他支持 Chrome 调试器协议的目标中调试您的 JavaScript 代码。</p><p><strong>Docker</strong></p><p>Docker 扩展使得从 Visual Studio Code 构建，管理和部署容器化应用程序变得非常简单</p><p><strong>Document This</strong></p><p>“Document This”是一个 Visual Studio 代码扩展，可为 TypeScript 和 JavaScript 文件自动生成详细的 JSDoc 注释。</p><p><strong>Easy LESS</strong></p><p>轻松处理 Visual Studio 代码中的 LESS 文件。</p><p><strong>ES7 React/Redux/GraphQL/React-Native snippets</strong></p><p>此扩展为您提供 ES7 中的 Javascript 和 React / Redux 片段，以及适用于 Vs 代码的 babel 插件功能</p><p><strong>ESLint</strong></p><p>将 ESLint 集成到 VS 代码中。</p><p><strong>filesize</strong></p><p>此包旨在与 Visual Studio 代码编辑器一起使用，并在编辑器的状态栏中显示焦点文件的大小。</p><p><strong>Git History</strong></p><p>查看和搜索 git 日志以及图表和细节。</p><p><strong>HTML CSS Support</strong></p><p>缺少对 HTML 文档的 CSS 支持。</p><p><strong>HTML SCSS Support</strong></p><p>缺少对 HTML 文档的 SCSS 支持。</p><p><strong>HTML Snippets</strong></p><p>Visual Studio 代码 HTML 片段</p><p><strong>HTMLHint</strong></p><p>将 HTMLHint 静态分析工具集成到 Visual Studio 代码中。</p><p><strong>Import Cost</strong></p><p>该扩展名将在编辑器中内联显示导入包的大小。 该扩展使用 webpack 与 babili-webpack-plugin 来检测导入的大小。</p><p><strong>JavaScript (ES6) code snippets</strong></p><p>VS Code JavaScript（ES6）片段</p><p><strong>jQuery Code Snippets</strong></p><p>超过 130 个用于 JavaScript 代码的 jQuery 代码片段。<br>只需键入字母’jq’即可获得所有可用 jQuery 代码片段的列表。</p><p><strong>Material Dark Soda</strong></p><p>Visual Studio Code 的一个美丽而充满活力的 Material Design 主题。</p><p><strong>Material Icon Theme</strong></p><p>材质图标主题提供了许多基于 Visual Studio 代码的材质设计的图标。</p><p><strong>npm Intellisense</strong></p><p>npm 智能感知</p><p><strong>Path Intellisense</strong></p><p>路径智能感知</p><p><strong>Project Manager</strong></p><p>在 Visual Studio 代码中管理您的项目。 轻松访问并在它们之间切换。</p><p><strong>React Native Tools</strong></p><p>该扩展为 React Native 项目提供了一个开发环境。 使用这个扩展，你可以调试你的代码，并从命令面板快速运行 react-native 命令。</p><p><strong>React/Redux/react-router Snippets</strong></p><p>用于 Visual Studio 代码的有用的 React 生态系统片段</p><p><strong>Settings Sync</strong></p><p>以前称为 Visual Studio 代码设置同步</p><p><strong>VS Code for Node.js - Development Pack</strong></p><p>这是一个扩展包，由我们的文章“Node.js 开发的 VS 代码入门”中的扩展组成。 他们的目标是使开发人员能够轻松地使用 VS Code 作为 Node.js 的文本编辑器运行。</p><p><strong>vscode-fileheader</strong></p><p>向文件头添加注释，并支持自动更新文件修改时间。(ctrl+alt+i 添加)</p><p><strong>vscode-icons</strong></p><p>将图标带入您的 Visual Studio 代码</p><p><strong>vscode-styled-components</strong></p><p>针对样式化组件的语法高亮和 IntelliSense。</p><p><strong>VueHelper</strong></p><p>vue 代码片段插件</p><p><strong>webpack</strong></p><p>用 babel transpiling（ES6）创建一个最小的 webpack 配置文件。</p><p><strong>Azure Functions</strong></p><p>VSE 代码中的[DEPRECATED] Azure 函数 JSON 智能感知</p><p><strong>Azure Account</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React脚手架装饰器</title>
      <link href="/2022/04/26/react%E8%84%9A%E6%89%8B%E6%9E%B6%E8%A3%85%E9%A5%B0%E5%99%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/26/react%E8%84%9A%E6%89%8B%E6%9E%B6%E8%A3%85%E9%A5%B0%E5%99%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>当你修饰器函数这样写的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_">connect</span>(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">AppView</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现的问题为：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parsing error: Using the export keyword between a decorator and a class is <span class="keyword">not</span> allowed. Please use `export @dec class` instead.</span><br></pre></td></tr></table></figure><p>解决方案：<br>安装依赖：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-decorators</span><br><span class="line">npm install --save-dev babel-plugin-transform-decorators-legacy</span><br></pre></td></tr></table></figure><p>修改 jsx 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_">connect</span>(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppView</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppView</span>;</span><br></pre></td></tr></table></figure><p>更改<code>package.json</code>文件中的 babel 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;react-app&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;loose&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>再次运行你的项目，就发现解决了刚才的问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS中的this指向</title>
      <link href="/2022/04/26/Js%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/26/Js%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="只要记住这句话，谁调用的就指向谁，既调用函数所处的父层"><a href="#只要记住这句话，谁调用的就指向谁，既调用函数所处的父层" class="headerlink" title="只要记住这句话，谁调用的就指向谁，既调用函数所处的父层"></a><code>只要记住这句话，谁调用的就指向谁，既调用函数所处的父层</code></h3><ul><li>window</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//等价于window.foo()</span></span><br></pre></td></tr></table></figure><p>此时的<code>this</code>=&gt;<code>window</code></p><ul><li>对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Jon&quot;</span>,</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">foo.<span class="title function_">getName</span>(); <span class="comment">//Jon</span></span><br></pre></td></tr></table></figure><p>此时的<code>this</code>=&gt;<code>foo</code>，如果改成这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = foo.<span class="property">getName</span>;</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><p>此时的<code>this</code>=&gt;<code>window</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你来了啊~</title>
      <link href="/2022/04/26/hello-world/"/>
      <url>/2022/04/26/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>你来了啊~</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><blockquote><p>嘻嘻</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
